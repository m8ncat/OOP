using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

private double dist(double l1, double d1, double l2, double d2)
{
	double r = 6875.0 / 2;
	double p = Math.Acos(-1.0);

	l1 *= p / 180;
	d1 *= p / 180;
	l2 *= p / 180;
	d2 *= p / 180;

	return r * Math.Acos(Math.Cos(l1) * Math.Cos(l2) * Math.Cos(d1 - d2) + Math.Sin(l1) * Math.Sin(l2));
}

static int Main()
{
	string temp = new string(new char[100]);
	double d;
	double m;
	double s;
	double l1;
	double l2;
	double d1;
	double d2;
	double dis;

	for (int i = 0 ; i < 9 ; ++i)
	{
		string tempVar = ConsoleInput.ScanfRead();
		if (tempVar != null)
		{
			temp = tempVar[0];
		}
	}
	string tempVar2 = ConsoleInput.ScanfRead();
	if (tempVar2 != null)
	{
		d = double.Parse(tempVar2);
	}
	string tempVar3 = ConsoleInput.ScanfRead("^");
	if (tempVar3 != null)
	{
		m = double.Parse(tempVar3);
	}
	string tempVar4 = ConsoleInput.ScanfRead("'");
	if (tempVar4 != null)
	{
		s = double.Parse(tempVar4);
	}
	string tempVar5 = ConsoleInput.ScanfRead("\" ");
	if (tempVar5 != null)
	{
		temp = tempVar5[0];
	}
	l1 = d + m / 60 + s / 3600;
	if (temp[0] == 'S')
	{
		l1 *= -1;
	}

	string tempVar6 = ConsoleInput.ScanfRead();
	if (tempVar6 != null)
	{
		temp = tempVar6[0];
	}
	string tempVar7 = ConsoleInput.ScanfRead();
	if (tempVar7 != null)
	{
		d = double.Parse(tempVar7);
	}
	string tempVar8 = ConsoleInput.ScanfRead("^");
	if (tempVar8 != null)
	{
		m = double.Parse(tempVar8);
	}
	string tempVar9 = ConsoleInput.ScanfRead("'");
	if (tempVar9 != null)
	{
		s = double.Parse(tempVar9);
	}
	string tempVar10 = ConsoleInput.ScanfRead("\" ");
	if (tempVar10 != null)
	{
		temp = tempVar10[0];
	}
	d1 = d + m / 60 + s / 3600;
	if (temp[0] == 'W')
	{
		d1 *= -1;
	}

	for (int i = 0 ; i < 5 ; ++i)
	{
		string tempVar11 = ConsoleInput.ScanfRead();
		if (tempVar11 != null)
		{
			temp = tempVar11[0];
		}
	}
	string tempVar12 = ConsoleInput.ScanfRead();
	if (tempVar12 != null)
	{
		d = double.Parse(tempVar12);
	}
	string tempVar13 = ConsoleInput.ScanfRead("^");
	if (tempVar13 != null)
	{
		m = double.Parse(tempVar13);
	}
	string tempVar14 = ConsoleInput.ScanfRead("'");
	if (tempVar14 != null)
	{
		s = double.Parse(tempVar14);
	}
	string tempVar15 = ConsoleInput.ScanfRead("\" ");
	if (tempVar15 != null)
	{
		temp = tempVar15[0];
	}
	l2 = d + m / 60 + s / 3600;
	if (temp[0] == 'S')
	{
		l2 *= -1;
	}

	string tempVar16 = ConsoleInput.ScanfRead();
	if (tempVar16 != null)
	{
		temp = tempVar16[0];
	}
	string tempVar17 = ConsoleInput.ScanfRead();
	if (tempVar17 != null)
	{
		d = double.Parse(tempVar17);
	}
	string tempVar18 = ConsoleInput.ScanfRead("^");
	if (tempVar18 != null)
	{
		m = double.Parse(tempVar18);
	}
	string tempVar19 = ConsoleInput.ScanfRead("'");
	if (tempVar19 != null)
	{
		s = double.Parse(tempVar19);
	}
	string tempVar20 = ConsoleInput.ScanfRead("\" ");
	if (tempVar20 != null)
	{
		temp = tempVar20[0];
	}
	d2 = d + m / 60 + s / 3600;
	if (temp[0] == 'W')
	{
		d2 *= -1;
	}

	string tempVar21 = ConsoleInput.ScanfRead();
	if (tempVar21 != null)
	{
		temp = tempVar21[0];
	}
	dis = dist(l1, d1, l2, d2);
	Console.Write("The distance to the iceberg: {0:f2} miles.\n",dis);
	if (Math.Floor(dis + 0.005) < 100)
	{
		Console.Write("DANGER!\n");
	}

internal static class ConsoleInput
{
	private static bool goodLastRead = false;
	public static bool LastReadWasGood
	{
		get
		{
			return goodLastRead;
		}
	}

	public static string ReadToWhiteSpace(bool skipLeadingWhiteSpace)
	{
		string input = "";

		char nextChar;
		while (char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
		{
			//accumulate leading white space if skipLeadingWhiteSpace is false:
			if (!skipLeadingWhiteSpace)
				input += nextChar;
		}
		//the first non white space character:
		input += nextChar;

		//accumulate characters until white space is reached:
		while (!char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
		{
			input += nextChar;
		}

		goodLastRead = input.Length > 0;
		return input;
	}

	public static string ScanfRead(string unwantedSequence = null, int maxFieldLength = -1)
	{
		string input = "";

		char nextChar;
		if (unwantedSequence != null)
		{
			nextChar = '\0';
			for (int charIndex = 0; charIndex < unwantedSequence.Length; charIndex++)
			{
				if (char.IsWhiteSpace(unwantedSequence[charIndex]))
				{
					//ignore all subsequent white space:
					while (char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
					{
					}
				}
				else
				{
					//ensure each character matches the expected character in the sequence:
					nextChar = (char)System.Console.Read();
					if (nextChar != unwantedSequence[charIndex])
						return null;
				}
			}

			input = nextChar.ToString();
			if (maxFieldLength == 1)
				return input;
		}

		while (!char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
		{
			input += nextChar;
			if (maxFieldLength == input.Length)
				return input;
		}

		return input;
	}
}
