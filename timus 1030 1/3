//====================================================================================================
//The Free Edition of C++ to C# Converter limits conversion output to 100 lines per snippet.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-cplus-to-csharp.html
//====================================================================================================

using System;

//C++ TO C# CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define MID(x,y) ( ( x + y ) >> 1 )
//C++ TO C# CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define L(x) ( x << 1 )
//C++ TO C# CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define R(x) ( x << 1 | 1 )
//C++ TO C# CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define BUG puts("here!!!")
//C++ TO C# CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define STOP system("pause")


private readonly double r = 6875.0 / 2;
private readonly double pi = acos(-1.0);
private double angle_3d(double lng1, double lat1, double lng2, double lat2)
{ //经度，纬度，经度，纬度
	return Math.Acos(Math.Cos(lat1) * Math.Cos(lat2) * Math.Cos(lng1 - lng2) + Math.Sin(lat1) * Math.Sin(lat2));
}

static int Main()
{
 string s = new string(new char[50]);

 double x1;
 double x2;
 double x3;

 double lng1;
 double lat1;
 double lng2;
 double lat2;

 while ((~scanf("%s", s)) != 0)
 {
  if (s[0] == '=')
  {
	  break;
  }
  for (int i = 0; i < 8; i++)
  {
	  string tempVar = ConsoleInput.ScanfRead();
	  if (tempVar != null)
	  {
		  s = tempVar[0];
	  }
  }

  string tempVar2 = ConsoleInput.ScanfRead();
  if (tempVar2 != null)
  {
	  x1 = double.Parse(tempVar2);
  }
  string tempVar3 = ConsoleInput.ScanfRead("^");
  if (tempVar3 != null)
  {
	  x2 = double.Parse(tempVar3);
  }
  string tempVar4 = ConsoleInput.ScanfRead("'");
  if (tempVar4 != null)
  {
	  x3 = double.Parse(tempVar4);
  }
  string tempVar5 = ConsoleInput.ScanfRead("\" ");
  if (tempVar5 != null)
  {
	  s = tempVar5[0];
  }
  lat1 = x1 + x2 / 60 + x3 / 3600;
  if (s[0] == 'S')
  {
	  lat1 *= -1;
  }

  string tempVar6 = ConsoleInput.ScanfRead();
  if (tempVar6 != null)
  {
	  s = tempVar6[0];
  }

  string tempVar7 = ConsoleInput.ScanfRead();
  if (tempVar7 != null)
  {
	  x1 = double.Parse(tempVar7);
  }
  string tempVar8 = ConsoleInput.ScanfRead("^");
  if (tempVar8 != null)
  {
	  x2 = double.Parse(tempVar8);
  }
  string tempVar9 = ConsoleInput.ScanfRead("'");
  if (tempVar9 != null)
  {
	  x3 = double.Parse(tempVar9);
  }
  string tempVar10 = ConsoleInput.ScanfRead("\" ");
  if (tempVar10 != null)
  {
	  s = tempVar10[0];
  }
  lng1 = x1 + x2 / 60 + x3 / 3600;
  if (s[0] == 'W')
  {
	  lng1 *= -1;
  }

  for (int i = 0; i < 5; i++)
  {
	  string tempVar11 = ConsoleInput.ScanfRead();
	  if (tempVar11 != null)
	  {
		  s = tempVar11[0];
	  }
  }

  string tempVar12 = ConsoleInput.ScanfRead();
  if (tempVar12 != null)
  {
	  x1 = double.Parse(tempVar12);
  }
  string tempVar13 = ConsoleInput.ScanfRead("^");
  if (tempVar13 != null)
  {
	  x2 = double.Parse(tempVar13);
  }
  string tempVar14 = ConsoleInput.ScanfRead("'");
  if (tempVar14 != null)
  {
	  x3 = double.Parse(tempVar14);
  }
  string tempVar15 = ConsoleInput.ScanfRead("\" ");
  if (tempVar15 != null)
  {
	  s = tempVar15[0];
  }
  lat2 = x1 + x2 / 60 + x3 / 3600;
  if (s[0] == 'S')
  {
	  lat2 *= -1;
  }

  string tempVar16 = ConsoleInput.ScanfRead();
  if (tempVar16 != null)
  {
	  s = tempVar16[0];
  }

  string tempVar17 = ConsoleInput.ScanfRead();
  if (tempVar17 != null)
  {
	  x1 = double.Parse(tempVar17);
  }
  string tempVar18 = ConsoleInput.ScanfRead("^");
  if (tempVar18 != null)
  {
	  x2 = double.Parse(tempVar18);
  }
  string tempVar19 = ConsoleInput.ScanfRead("'");
  if (tempVar19 != null)
  {
	  x3 = double.Parse(tempVar19);
  }
  string tempVar20 = ConsoleInput.ScanfRead("\" ");
  if (tempVar20 != null)
  {
	  s = tempVar20[0];
  }
  lng2 = x1 + x2 / 60 + x3 / 3600;
  if (s[0] == 'W')
  {
	  lng2 *= -1;
  }

  double ang = angle_3d(lng1 * pi / 180, lat1 * pi / 180, lng2 * pi / 180, lat2 * pi / 180);
  double dis = ang * r;

  Console.Write("The distance to the iceberg: {0:f2} miles.\n", dis);


//====================================================================================================
//End of the allowed output for the Free Edition of C++ to C# Converter.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-cplus-to-csharp.html
//====================================================================================================

//Helper class added by C++ to C# Converter:

//----------------------------------------------------------------------------------------
//	Copyright © 2006 - 2020 Tangible Software Solutions, Inc.
//	This class can be used by anyone provided that the copyright notice remains intact.
//
//	This class provides the ability to convert basic C++ 'cin' and C 'scanf' behavior.
//----------------------------------------------------------------------------------------
internal static class ConsoleInput
{
	private static bool goodLastRead = false;
	public static bool LastReadWasGood
	{
		get
		{
			return goodLastRead;
		}
	}

	public static string ReadToWhiteSpace(bool skipLeadingWhiteSpace)
	{
		string input = "";

		char nextChar;
		while (char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
		{
			//accumulate leading white space if skipLeadingWhiteSpace is false:
			if (!skipLeadingWhiteSpace)
				input += nextChar;
		}
		//the first non white space character:
		input += nextChar;

		//accumulate characters until white space is reached:
		while (!char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
		{
			input += nextChar;
		}

		goodLastRead = input.Length > 0;
		return input;
	}

	public static string ScanfRead(string unwantedSequence = null, int maxFieldLength = -1)
	{
		string input = "";

		char nextChar;
		if (unwantedSequence != null)
		{
			nextChar = '\0';
			for (int charIndex = 0; charIndex < unwantedSequence.Length; charIndex++)
			{
				if (char.IsWhiteSpace(unwantedSequence[charIndex]))
				{
					//ignore all subsequent white space:
					while (char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
					{
					}
				}
				else
				{
					//ensure each character matches the expected character in the sequence:
					nextChar = (char)System.Console.Read();
					if (nextChar != unwantedSequence[charIndex])
						return null;
				}
			}

			input = nextChar.ToString();
			if (maxFieldLength == 1)
				return input;
		}

		while (!char.IsWhiteSpace(nextChar = (char)System.Console.Read()))
		{
			input += nextChar;
			if (maxFieldLength == input.Length)
				return input;
		}

		return input;
	}
}
